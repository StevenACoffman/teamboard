package genqlient

// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

import (
	"context"

	"github.com/Khan/genqlient/graphql"
	"github.com/StevenACoffman/teamboard/pkg/types"
)

// MyBatchMementionedSearchResultItemConnection includes the requested fields of the GraphQL type SearchResultItemConnection.
// The GraphQL type's documentation follows.
//
// A list of results that matched against a search query.
type MyBatchMementionedSearchResultItemConnection struct {
	// The number of issues that matched the search query.
	IssueCount int `json:"issueCount"`
	// A list of edges.
	Edges []types.Edge `json:"edges"`
}

// MyBatchMerequestedSearchResultItemConnection includes the requested fields of the GraphQL type SearchResultItemConnection.
// The GraphQL type's documentation follows.
//
// A list of results that matched against a search query.
type MyBatchMerequestedSearchResultItemConnection struct {
	// The number of issues that matched the search query.
	IssueCount int `json:"issueCount"`
	// A list of edges.
	Edges []types.Edge `json:"edges"`
}

// MyBatchResponse is returned by MyBatch on success.
type MyBatchResponse struct {
	// Perform a search across resources.
	Merequested MyBatchMerequestedSearchResultItemConnection `json:"merequested"`
	// Perform a search across resources.
	Mementioned MyBatchMementionedSearchResultItemConnection `json:"mementioned"`
	// Perform a search across resources.
	Teammates MyBatchTeammatesSearchResultItemConnection `json:"teammates"`
	// Perform a search across resources.
	Teammentions MyBatchTeammentionsSearchResultItemConnection `json:"teammentions"`
	// Perform a search across resources.
	Teamrequested MyBatchTeamrequestedSearchResultItemConnection `json:"teamrequested"`
}

// MyBatchTeammatesSearchResultItemConnection includes the requested fields of the GraphQL type SearchResultItemConnection.
// The GraphQL type's documentation follows.
//
// A list of results that matched against a search query.
type MyBatchTeammatesSearchResultItemConnection struct {
	// The number of issues that matched the search query.
	IssueCount int `json:"issueCount"`
	// A list of edges.
	Edges []types.Edge `json:"edges"`
}

// MyBatchTeammentionsSearchResultItemConnection includes the requested fields of the GraphQL type SearchResultItemConnection.
// The GraphQL type's documentation follows.
//
// A list of results that matched against a search query.
type MyBatchTeammentionsSearchResultItemConnection struct {
	// The number of issues that matched the search query.
	IssueCount int `json:"issueCount"`
	// A list of edges.
	Edges []types.Edge `json:"edges"`
}

// MyBatchTeamrequestedSearchResultItemConnection includes the requested fields of the GraphQL type SearchResultItemConnection.
// The GraphQL type's documentation follows.
//
// A list of results that matched against a search query.
type MyBatchTeamrequestedSearchResultItemConnection struct {
	// The number of issues that matched the search query.
	IssueCount int `json:"issueCount"`
	// A list of edges.
	Edges []types.Edge `json:"edges"`
}

// MyLoginResponse is returned by MyLogin on success.
type MyLoginResponse struct {
	// The currently authenticated user.
	Viewer MyLoginViewerUser `json:"viewer"`
}

// MyLoginViewerUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type MyLoginViewerUser struct {
	// The username used to login.
	Login string `json:"login"`
}

// MyOrgsResponse is returned by MyOrgs on success.
type MyOrgsResponse struct {
	// The currently authenticated user.
	Viewer MyOrgsViewerUser `json:"viewer"`
}

// MyOrgsViewerUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type MyOrgsViewerUser struct {
	// A list of organizations the user belongs to.
	Organizations MyOrgsViewerUserOrganizationsOrganizationConnection `json:"organizations"`
}

// MyOrgsViewerUserOrganizationsOrganizationConnection includes the requested fields of the GraphQL type OrganizationConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Organization.
type MyOrgsViewerUserOrganizationsOrganizationConnection struct {
	// A list of nodes.
	Nodes []MyOrgsViewerUserOrganizationsOrganizationConnectionNodesOrganization `json:"nodes"`
}

// MyOrgsViewerUserOrganizationsOrganizationConnectionNodesOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An account on GitHub, with one or more owners, that has repositories, members and teams.
type MyOrgsViewerUserOrganizationsOrganizationConnectionNodesOrganization struct {
	// The organization's login name.
	Login string `json:"login"`
}

// MyTeamsOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An account on GitHub, with one or more owners, that has repositories, members and teams.
type MyTeamsOrganization struct {
	// A list of teams in this organization.
	Teams MyTeamsOrganizationTeamsTeamConnection `json:"teams"`
}

// MyTeamsOrganizationTeamsTeamConnection includes the requested fields of the GraphQL type TeamConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Team.
type MyTeamsOrganizationTeamsTeamConnection struct {
	// Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount"`
	// A list of edges.
	Edges []MyTeamsOrganizationTeamsTeamConnectionEdgesTeamEdge `json:"edges"`
}

// MyTeamsOrganizationTeamsTeamConnectionEdgesTeamEdge includes the requested fields of the GraphQL type TeamEdge.
// The GraphQL type's documentation follows.
//
// An edge in a connection.
type MyTeamsOrganizationTeamsTeamConnectionEdgesTeamEdge struct {
	// The item at the end of the edge.
	Node MyTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeam `json:"node"`
}

// MyTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A team of users in an organization.
type MyTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeam struct {
	// The name of the team.
	Name string `json:"name"`
	// The description of the team.
	Description string `json:"description"`
}

// MyTeamsResponse is returned by MyTeams on success.
type MyTeamsResponse struct {
	// Lookup a organization by login.
	Organization MyTeamsOrganization `json:"organization"`
}

// TeamMembersOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An account on GitHub, with one or more owners, that has repositories, members and teams.
type TeamMembersOrganization struct {
	// A list of teams in this organization.
	Teams TeamMembersOrganizationTeamsTeamConnection `json:"teams"`
}

// TeamMembersOrganizationTeamsTeamConnection includes the requested fields of the GraphQL type TeamConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Team.
type TeamMembersOrganizationTeamsTeamConnection struct {
	// Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount"`
	// A list of edges.
	Edges []TeamMembersOrganizationTeamsTeamConnectionEdgesTeamEdge `json:"edges"`
}

// TeamMembersOrganizationTeamsTeamConnectionEdgesTeamEdge includes the requested fields of the GraphQL type TeamEdge.
// The GraphQL type's documentation follows.
//
// An edge in a connection.
type TeamMembersOrganizationTeamsTeamConnectionEdgesTeamEdge struct {
	// The item at the end of the edge.
	Node TeamMembersOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeam `json:"node"`
}

// TeamMembersOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A team of users in an organization.
type TeamMembersOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeam struct {
	// A list of users who are members of this team.
	Members TeamMembersOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnection `json:"members"`
	// The name of the team.
	Name string `json:"name"`
	// The description of the team.
	Description string `json:"description"`
}

// TeamMembersOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnection includes the requested fields of the GraphQL type TeamMemberConnection.
// The GraphQL type's documentation follows.
//
// The connection type for User.
type TeamMembersOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnection struct {
	// A list of edges.
	Edges []TeamMembersOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnectionEdgesTeamMemberEdge `json:"edges"`
}

// TeamMembersOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnectionEdgesTeamMemberEdge includes the requested fields of the GraphQL type TeamMemberEdge.
// The GraphQL type's documentation follows.
//
// Represents a user who is a member of a team.
type TeamMembersOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnectionEdgesTeamMemberEdge struct {
	Node TeamMembersOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnectionEdgesTeamMemberEdgeNodeUser `json:"node"`
}

// TeamMembersOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnectionEdgesTeamMemberEdgeNodeUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type TeamMembersOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnectionEdgesTeamMemberEdgeNodeUser struct {
	// The user's public profile name.
	Name string `json:"name"`
	// The username used to login.
	Login string `json:"login"`
}

// TeamMembersResponse is returned by TeamMembers on success.
type TeamMembersResponse struct {
	// Lookup a organization by login.
	Organization TeamMembersOrganization `json:"organization"`
}

func MyLogin(
	ctx context.Context,
	client graphql.Client,
) (*MyLoginResponse, error) {
	var retval MyLoginResponse
	err := client.MakeRequest(
		ctx,
		"MyLogin",
		`
query MyLogin {
	viewer {
		login
	}
}
`,
		&retval,
		nil,
	)
	return &retval, err
}

func MyOrgs(
	ctx context.Context,
	client graphql.Client,
) (*MyOrgsResponse, error) {
	var retval MyOrgsResponse
	err := client.MakeRequest(
		ctx,
		"MyOrgs",
		`
query MyOrgs {
	viewer {
		organizations(first: 100) {
			nodes {
				login
			}
		}
	}
}
`,
		&retval,
		nil,
	)
	return &retval, err
}

func MyTeams(
	ctx context.Context,
	client graphql.Client,
	org string,
	login string,
) (*MyTeamsResponse, error) {
	variables := map[string]interface{}{
		"Org":   org,
		"Login": login,
	}

	var retval MyTeamsResponse
	err := client.MakeRequest(
		ctx,
		"MyTeams",
		`
query MyTeams ($Org: String!, $Login: String!) {
	organization(login: $Org) {
		teams(first: 100, userLogins: [$Login]) {
			totalCount
			edges {
				node {
					name
					description
				}
			}
		}
	}
}
`,
		&retval,
		variables,
	)
	return &retval, err
}

func MyBatch(
	ctx context.Context,
	client graphql.Client,
	meRequestedQuery string,
	meMentionedQuery string,
	teamAuthoredQuery string,
	teamMentionedQuery string,
	teamRequestedQuery string,
) (*MyBatchResponse, error) {
	variables := map[string]interface{}{
		"MeRequestedQuery":   meRequestedQuery,
		"MeMentionedQuery":   meMentionedQuery,
		"TeamAuthoredQuery":  teamAuthoredQuery,
		"TeamMentionedQuery": teamMentionedQuery,
		"TeamRequestedQuery": teamRequestedQuery,
	}

	var retval MyBatchResponse
	err := client.MakeRequest(
		ctx,
		"MyBatch",
		`
query MyBatch ($MeRequestedQuery: String!, $MeMentionedQuery: String!, $TeamAuthoredQuery: String!, $TeamMentionedQuery: String!, $TeamRequestedQuery: String!) {
	merequested: search(query: $MeRequestedQuery, type: ISSUE, first: 100) {
		issueCount
		edges {
			node {
				__typename
				... on PullRequest {
					number
					title
					repository {
						nameWithOwner
					}
					author {
						__typename
						login
					}
					createdAt
					mergedAt
					url
					changedFiles
					additions
					deletions
				}
			}
		}
	}
	mementioned: search(query: $MeMentionedQuery, type: ISSUE, first: 100) {
		issueCount
		edges {
			node {
				__typename
				... on PullRequest {
					number
					title
					repository {
						nameWithOwner
					}
					author {
						__typename
						login
					}
					createdAt
					mergedAt
					url
					changedFiles
					additions
					deletions
				}
			}
		}
	}
	teammates: search(query: $TeamAuthoredQuery, type: ISSUE, first: 100) {
		issueCount
		edges {
			node {
				__typename
				... on PullRequest {
					number
					title
					repository {
						nameWithOwner
					}
					author {
						__typename
						login
					}
					createdAt
					mergedAt
					url
					changedFiles
					additions
					deletions
				}
			}
		}
	}
	teammentions: search(query: $TeamMentionedQuery, type: ISSUE, first: 100) {
		issueCount
		edges {
			node {
				__typename
				... on PullRequest {
					number
					title
					repository {
						nameWithOwner
					}
					author {
						__typename
						login
					}
					createdAt
					mergedAt
					url
					changedFiles
					additions
					deletions
				}
			}
		}
	}
	teamrequested: search(query: $TeamRequestedQuery, type: ISSUE, first: 100) {
		issueCount
		edges {
			node {
				__typename
				... on PullRequest {
					number
					title
					repository {
						nameWithOwner
					}
					author {
						__typename
						login
					}
					createdAt
					mergedAt
					url
					changedFiles
					additions
					deletions
				}
			}
		}
	}
}
`,
		&retval,
		variables,
	)
	return &retval, err
}

func TeamMembers(
	ctx context.Context,
	client graphql.Client,
	org string,
	team string,
) (*TeamMembersResponse, error) {
	variables := map[string]interface{}{
		"Org":  org,
		"Team": team,
	}

	var retval TeamMembersResponse
	err := client.MakeRequest(
		ctx,
		"TeamMembers",
		`
query TeamMembers ($Org: String!, $Team: String!) {
	organization(login: $Org) {
		teams(first: 100, query: $Team) {
			totalCount
			edges {
				node {
					members {
						edges {
							node {
								name
								login
							}
						}
					}
					name
					description
				}
			}
		}
	}
}
`,
		&retval,
		variables,
	)
	return &retval, err
}
